import discord
from discord.ext import commands
from dotenv import load_dotenv
import os
import asyncio
import schedule

from db import SQL


db = SQL()


async def job(channel: discord.TextChannel, guild: discord.Guild, members, name):
    await channel.send(f'üö®–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞!üö®')
    guild = bot.get_guild(int(SERVER_ID))
    voice_channels_names = [i.name for i in guild.voice_channels]
    voice_channel = guild.voice_channels[voice_channels_names.index(name)]
    was = []
    for member in members:
        user = guild.get_member(member['id'])
        if member['id'] not in [i.id for i in voice_channel.members]:
            await user.send('–ü—Ä–∏–≤–µ—Ç! –¢–µ–±—è –Ω–µ –±—ã–ª–æ –Ω–∞ –∑–∞–Ω—è—Ç–∏—è—Ö! –ê–π-–∞–π-–∞–π!', tts=True)
        else:
            was.append(user.name)
    await channel.send(f'–°–µ–≥–æ–¥–Ω—è –Ω–∞ –∑–∞–Ω—è—Ç–∏—è—Ö –±—ã–ª–∏: {", ".join(was)}')


async def update():
    database = {'–ó–∞–Ω—è—Ç–∏–µ –ü–ù-–°–† 19:00': {'days': ['monday', 'wendsday'], 'time': '19:32', 'channel_id': 1120389774243549247}} # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–º–µ–Ω–Ω–æ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    schedule.clear()
    for name, data in database.items():
        channel = bot.get_channel(data['channel_id'])
        for date in data['days']:
            if date == 'monday':
                schedule.every().monday.at(data['time']).do(lambda channel, name: asyncio.run_coroutine_threadsafe(job(channel, name), bot.loop), channel, name)
            elif date == 'tuesday':
                schedule.every().tuesday.at(data['time']).do(lambda channel, name: asyncio.run_coroutine_threadsafe(job(channel, name), bot.loop), channel, name)
            elif date == 'wednesday':
                schedule.every().wednesday.at(data['time']).do(lambda channel, name: asyncio.run_coroutine_threadsafe(job(channel, name), bot.loop), channel, name)
            elif date == 'thursday':
                schedule.every().thursday.at(data['time']).do(lambda channel, name: asyncio.run_coroutine_threadsafe(job(channel, name), bot.loop), channel, name)
            elif date == 'friday':
                schedule.every().friday.at(data['time']).do(lambda channel, name: asyncio.run_coroutine_threadsafe(job(channel, name), bot.loop), channel, name)
            elif date == 'saturday':
                schedule.every().saturday.at(data['time']).do(lambda channel, name: asyncio.run_coroutine_threadsafe(job(channel, name), bot.loop), channel, name)
            elif date == 'sunday':
                schedule.every().sunday.at(data['time']).do(lambda channel, name: asyncio.run_coroutine_threadsafe(job(channel, name), bot.loop), channel, name)
    schedule.every(24).hours.do(lambda: asyncio.run_coroutine_threadsafe(update(), bot.loop))


async def send_info():
    # schedule.every(10).seconds.do(lambda channel: asyncio.run_coroutine_threadsafe(job(channel), bot.loop), channel)
    database = {'–ó–∞–Ω—è—Ç–∏–µ –ü–ù-–°–† 19:00': {'days': ['monday', 'wednesday', 'tuesday'], 'time': '17:13', 'channel_id': 1120389774243549247, 'members': [{'name': 'Farfur', 'id': 306436605541875724}, {'name': 'Ivan', 'id': 691174001451466772}]}} # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–º–µ–Ω–Ω–æ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    schedule.clear()
    guild = bot.get_guild(int(SERVER_ID))
    for name, data in database.items():
        channel = bot.get_channel(data['channel_id'])
        # print('; '.join(data['members']))
        for date in data['days']:
            if date == 'monday':
                schedule.every().monday.at(data['time']).do(lambda channel, guild, members, name: asyncio.run_coroutine_threadsafe(job(channel, guild, members, name), bot.loop), channel, guild, data['members'], name)
            elif date == 'tuesday':
                schedule.every().tuesday.at(data['time']).do(lambda channel, guild, members, name: asyncio.run_coroutine_threadsafe(job(channel, guild, members, name), bot.loop), channel, guild, data['members'], name)
            elif date == 'wednesday':
                schedule.every().wednesday.at(data['time']).do(lambda channel, guild, members, name: asyncio.run_coroutine_threadsafe(job(channel, guild, members, name), bot.loop), channel, guild, data['members'], name)
            elif date == 'thursday':
                schedule.every().thursday.at(data['time']).do(lambda channel, guild, members, name: asyncio.run_coroutine_threadsafe(job(channel, guild, members, name), bot.loop), channel, guild, data['members'], name)
            elif date == 'friday':
                schedule.every().friday.at(data['time']).do(lambda channel, guild, members, name: asyncio.run_coroutine_threadsafe(job(channel, guild, members, name), bot.loop), channel, guild, data['members'], name)
            elif date == 'saturday':
                schedule.every().saturday.at(data['time']).do(lambda channel, guild, members, name: asyncio.run_coroutine_threadsafe(job(channel, guild, members, name), bot.loop), channel, guild, data['members'], name)
            elif date == 'sunday':
                schedule.every().sunday.at(data['time']).do(lambda channel, guild, members, name: asyncio.run_coroutine_threadsafe(job(channel, guild, members, name), bot.loop), channel, guild, data['members'], name)
    schedule.every(24).hours.do(lambda: asyncio.run_coroutine_threadsafe(update(), bot.loop))
    while True:
        schedule.run_pending()
        await asyncio.sleep(1)

load_dotenv()

SERVER_ID = 1119553215856386058

bot = commands.Bot(command_prefix='/', intents=discord.Intents.all())
bot.remove_command('help')

@bot.event
async def on_ready():
    asyncio.run_coroutine_threadsafe(send_info(), bot.loop)


@bot.event
async def on_member_join(member): # –í –¥–∞–ª—å–Ω–µ–π—à–µ–º, —Ñ—É–Ω–∫—Ü–∏—è echo –ø–µ—Ä–µ–µ–¥–µ—Ç —Å—é–¥–∞. –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ —á–µ–ª–æ–≤–µ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è
    pass


@bot.command(name='echo') # –ó–∞–≥–ª—É—à–∫–∞! –í –¥–∞–ª—å–Ω–µ–π—à–µ–º, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–¥
async def help(ctx):
    guild = bot.get_guild(int(SERVER_ID))
    await ctx.reply('### –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä Python:) –í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã:\n<–≥—Ä—É–ø–ø—ã>\n–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É:\n/reg ***<–ò–º—è>*** ***<–§–∞–º–∏–ª–∏—è>*** ***<ID –≥—Ä—É–ø–ø—ã (—Å–º–æ—Ç—Ä–∏ —Å–≤–µ—Ä—Ö—É)>*** ***<—Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–≤–æ–π Devman –ø—Ä–æ—Ñ–∏–ª—å>***')


@bot.command() # –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
async def reg(ctx, name=None, last_name=None, group_id=None, *, devman_url=None):
    if name is None or last_name is None or group_id is None or devman_url is None:
        await ctx.reply('–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ —Ç—ã –∫–∞–∫–æ–π-—Ç–æ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ —É–∫–∞–∑–∞–ª:( –ü—Ä–æ–≤–µ—Ä—å!')
        return
    guild = bot.get_guild(int(SERVER_ID))
    role = guild.get_role(1123656426519265311)
    author = ctx.message.author
    user = guild.get_member(author.id)
    await user.add_roles(role)
    # TODO –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É, –∑–∞—Ä–µ–≥–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    await ctx.reply(f'–¢–µ–ø–µ—Ä—å —Ç—ã –Ω–∞–∑–Ω–∞—á–µ–Ω –≤ –≥—Ä—É–ø–ø—É {role.name}')


# @bot.command(name='test') # –¢–µ—Å—Ç!
# async def help(ctx):
#     guild = bot.get_guild(int(SERVER_ID))
#     channel = guild.get_channel(1120389836730286110)
#     with open('photo.png', 'wb') as file:
#         channel.members[0].avatar.save(file)
#     # await ctx.reply(f'–í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ {guild.voice_channels[0].name}: {", ".join([i.name for i in guild.voice_channels[0].members])}')


def main():
    bot.run(os.getenv('DISCORD_TOKEN'))


if __name__ == '__main__':
    main()