import discord
from discord.ext import commands 
from dotenv import load_dotenv
import os
import asyncio
import schedule
from schedule import repeat, every
import datetime
from scheduler import Scheduler
import urllib.parse

from db import SQL
import google_sheet

load_dotenv()


db = SQL()
once_schedule = Scheduler()
sheet = google_sheet.start_google_sheet()


def next_weekday(d, weekday): # –ü–æ–¥—Å—á—ë—Ç –¥–∞—Ç—ã —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
    days_ahead = weekday - d.weekday()
    if days_ahead <= 0:
        days_ahead += 7
    return d + datetime.timedelta(days_ahead)


async def planed_voice_check(channel: discord.TextChannel, guild: discord.Guild, members, voice_channel): # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥–æ–ª–æ—Å. –∫–∞–Ω–∞–ª–µ (–Ω–µ —Å—á–∏—Ç–∞—è –æ—Ç—Ä–∞–±–æ—Ç–æ–∫)
    # await channel.send(f'üö®–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞! –ü—Ä–æ—Å—å–±–∞ –Ω–µ –æ—Ç–∫–ª—é—á–∞—Ç—å—Å—è –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –±–ª–∏–∂–∞–π—à–∏–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥!üö®')
    loop = asyncio.get_event_loop()
    guild = bot.get_guild(int(SERVER_ID))
    was = []
    was_working_of = []
    for member in members:
        user = guild.get_member(member['id'])
        if member['id'] not in [i.id for i in voice_channel.members]:
            was_working_of.append(user)
        else:
            was.append(user.name)
    # await channel.send(f'–°–µ–≥–æ–¥–Ω—è –Ω–∞ –∑–∞–Ω—è—Ç–∏—è—Ö –±—ã–ª–∏: {", ".join(was)}')
    for student in was_working_of:
        student_info = await loop.run_in_executor(None, db.get_student, student.id)
        new_student_skips = student_info['skips'] + 1
        await loop.run_in_executor(None, db.update_student_skips, new_student_skips, student.id)
        await loop.run_in_executor(None, db.add_skip, student.id, str(datetime.datetime.now().strftime('%d.%m.%Y')))
        groups = await loop.run_in_executor(None, db.get_free_groups_for_working_of, student.id)
        groups_texts_dates = []
        for group in groups:
            days = group['days'].replace('monday', '0').replace('tuesday', '1').replace('wednesday', '2').replace('thursday', '3').replace('friday', '4').replace('saturday', '5').replace('sunday', '6')
            for index in range(len(days.split(', '))):
                date = next_weekday(datetime.date.today(), int(days.split(', ')[index]))
                moscow_time = f'{int(group["start_time"].split(":")[0]) + 3}:{group["start_time"].split(":")[1]}'
                groups_texts_dates.append((f'{date.strftime("%d.%m")} –≤ {moscow_time}', date))
        groups_texts = [f'{num}. {i[0]}' for num, i in enumerate(sorted(groups_texts_dates, key=lambda i: i[1]), 1)]
        if groups_texts:
            await student.send('–ü—Ä–∏–≤–µ—Ç! –¢—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª –∑–∞–Ω—è—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å–µ–π—á–∞—Å –±—ã–ª–æ! –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, —ç—Ç–æ—Ç –ø—Ä–æ–ø—É—Å–∫ –º–æ–∂–Ω–æ –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å:) –í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã:\n{}\n–û—Ç—Ä–∞–±–æ—Ç–∫–∞ –∏–¥—ë—Ç –æ–¥–∏–Ω —á–∞—Å!\n–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –æ—Ç—Ä–∞–±–æ—Ç–∫—É –Ω–∞–ø–∏—à–∏: /work_of <–ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã (—Å–º–æ—Ç—Ä–∏ —Å–≤–µ—Ä—Ö—É)>'.format('\n'.join(groups_texts))) #TODO –î–æ–±–∞–≤–∏—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!
        else:
            await student.send('–ü—Ä–∏–≤–µ—Ç! –¢—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª –∑–∞–Ω—è—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å–µ–π—á–∞—Å –±—ã–ª–æ! –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, —ç—Ç–æ—Ç –ø—Ä–æ–ø—É—Å–∫ –º–æ–∂–Ω–æ –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å:) –ù–æ –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π –≥—Ä—É–ø–ø—ã. –°–º–æ–∂–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã: /check')


@repeat(every(10).seconds) # –ó–¥–µ—Å—å –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è, –≤ –∫–æ—Ç–æ—Ä–æ–π –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–±
def start_update():
    asyncio.run_coroutine_threadsafe(update(), bot.loop)

async def update(): # –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–±
    loop = asyncio.get_event_loop()
    guild = bot.get_guild(int(SERVER_ID))
    groups = await loop.run_in_executor(None, db.get_all_groups)
    database = dict()
    for group in groups:
        group_voice_channel = guild.get_channel(group['voice_chat_id'])
        hour, _ = group['start_time'].split(':')
        time = ':'.join((hour, '30'))
        if len(time) != 5:
            time = '0' + time
        members = await loop.run_in_executor(None, db.get_all_students_for_group, group['role_id'])
        database_members = []
        now_week_day = str(datetime.datetime.now().isoweekday()).replace('1', 'monday').replace('2', 'tuesday').replace('3', 'wednesday').replace('4', 'thursday').replace('5', 'friday').replace('6', 'saturday').replace('7', 'sunday')
        for member in members:
            if not member['days'] or now_week_day == member['days']:
                database_members.append({'name': member['name'], 'id': member['discord_id']})
        database[group_voice_channel] = {'days': group['days'].split(', '), 'time': time, 'channel_id': group['channel_id'], 'members': database_members}
    schedule.clear('check')
    for voice_channel, data in database.items():
        channel = bot.get_channel(data['channel_id'])
        for date in data['days']:
            if date == 'monday':
                schedule.every().monday.at(data['time']).do(lambda channel, guild, members, voice_channel: asyncio.run_coroutine_threadsafe(planed_voice_check(channel, guild, members, voice_channel), bot.loop), channel, guild, data['members'], voice_channel).tag('check')
            elif date == 'tuesday':
                schedule.every().tuesday.at(data['time']).do(lambda channel, guild, members, voice_channel: asyncio.run_coroutine_threadsafe(planed_voice_check(channel, guild, members, voice_channel), bot.loop), channel, guild, data['members'], voice_channel).tag('check')
            elif date == 'wednesday':
                schedule.every().wednesday.at(data['time']).do(lambda channel, guild, members, voice_channel: asyncio.run_coroutine_threadsafe(planed_voice_check(channel, guild, members, voice_channel), bot.loop), channel, guild, data['members'], voice_channel).tag('check')
            elif date == 'thursday':
                schedule.every().thursday.at(data['time']).do(lambda channel, guild, members, voice_channel: asyncio.run_coroutine_threadsafe(planed_voice_check(channel, guild, members, voice_channel), bot.loop), channel, guild, data['members'], voice_channel).tag('check')
            elif date == 'friday':
                schedule.every().friday.at(data['time']).do(lambda channel, guild, members, voice_channel: asyncio.run_coroutine_threadsafe(planed_voice_check(channel, guild, members, voice_channel), bot.loop), channel, guild, data['members'], voice_channel).tag('check')
            elif date == 'saturday':
                schedule.every().saturday.at(data['time']).do(lambda channel, guild, members, voice_channel: asyncio.run_coroutine_threadsafe(planed_voice_check(channel, guild, members, voice_channel), bot.loop), channel, guild, data['members'], voice_channel).tag('check')
            elif date == 'sunday':
                schedule.every().sunday.at(data['time']).do(lambda channel, guild, members, voice_channel: asyncio.run_coroutine_threadsafe(planed_voice_check(channel, guild, members, voice_channel), bot.loop), channel, guild, data['members'], voice_channel).tag('check')


async def get_roles_and_notofication(user: discord.Member, role_id: int): # –ó–∞ 10 –º–∏–Ω—É—Ç –¥–ª—è –æ—Ç—Ä–∞–±–æ—Ç–∫–∏ –±–æ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –∏ –≤—ã–¥–∞—ë—Ç —Ä–æ–ª—å
    guild = bot.get_guild(int(SERVER_ID))
    role = guild.get_role(role_id)
    await user.add_roles(role)
    await user.send(f'–•—ç–π! –¢—ã –Ω–µ –∑–∞–±—ã–ª, —á—Ç–æ —É —Ç–µ–±—è —á–µ—Ä–µ–∑ ***10 –º–∏–Ω—É—Ç*** –∑–∞–Ω—è—Ç–∏—è? –ú–æ–∂–µ—à—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è—Ç—Å—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º ***–ó–∞–Ω—è—Ç–∏–µ {role.name}***')


async def check_members_work_of(user: discord.Member, voice_chat_id: int, db_id: int): # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–∞ –æ—Ç—Ä–∞–±–æ—Ç–∫–µ
    loop = asyncio.get_event_loop()
    guild = bot.get_guild(int(SERVER_ID))
    voice_chat_members = [member.id for member in guild.get_channel(voice_chat_id).members]
    if user.id in voice_chat_members:
        await loop.run_in_executor(None, db.update_working_of_visit, db_id, True)
    else:
        student_info = await loop.run_in_executor(None, db.get_student, user.id)
        new_student_skips = student_info['skips'] + 1
        await loop.run_in_executor(None, db.update_student_skips, new_student_skips, user.id)
        groups = await loop.run_in_executor(None, db.get_free_groups_for_working_of, user.id)
        groups_texts_dates = []
        for group in groups:
            days = group['days'].replace('monday', '0').replace('tuesday', '1').replace('wednesday', '2').replace('thursday', '3').replace('friday', '4').replace('saturday', '5').replace('sunday', '6')
            for index in range(len(days.split(', '))):
                date = next_weekday(datetime.date.today(), int(days.split(', ')[index]))
                moscow_time = f'{int(group["start_time"].split(":")[0]) + 3}:{group["start_time"].split(":")[1]}'
                groups_texts_dates.append((f'{date.strftime("%d.%m")} –≤ {moscow_time}', date))
        groups_texts = [f'{num}. {i[0]}' for num, i in enumerate(sorted(groups_texts_dates, key=lambda i: i[1]), 1)]
        if groups_texts:
            await user.send('–ü—Ä–∏–≤–µ—Ç! –¢—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª –∑–∞–Ω—è—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å–µ–π—á–∞—Å –±—ã–ª–æ! –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, —ç—Ç–æ—Ç –ø—Ä–æ–ø—É—Å–∫ –º–æ–∂–Ω–æ –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å:) –í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã:\n{}\n–û—Ç—Ä–∞–±–æ—Ç–∫–∞ –∏–¥—ë—Ç –æ–¥–∏–Ω —á–∞—Å!\n–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –æ—Ç—Ä–∞–±–æ—Ç–∫—É –Ω–∞–ø–∏—à–∏: /work_of <–ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã (—Å–º–æ—Ç—Ä–∏ —Å–≤–µ—Ä—Ö—É)>'.format('\n'.join(groups_texts))) #TODO –î–æ–±–∞–≤–∏—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!
        else:
            await user.send('–ü—Ä–∏–≤–µ—Ç! –¢—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª –∑–∞–Ω—è—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å–µ–π—á–∞—Å –±—ã–ª–æ! –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, —ç—Ç–æ—Ç –ø—Ä–æ–ø—É—Å–∫ –º–æ–∂–Ω–æ –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å:) –ù–æ –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π –≥—Ä—É–ø–ø—ã. –°–º–æ–∂–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã: /check')


async def remove_role(user: discord.Member, role_id: int, db_id: int): # –ü–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ—Ç—Ä–∞–±–æ—Ç–∫–∏ –±–æ—Ç –∑–∞–±–∏—Ä–∞–µ—Ç —Ä–æ–ª—å
    loop = asyncio.get_event_loop()
    guild = bot.get_guild(int(SERVER_ID))
    role = guild.get_role(role_id)
    await user.remove_roles(role)
    work_of = await loop.run_in_executor(None, db.get_working_of_by_id, db_id)
    if work_of['student_visit']:
        await user.send(f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –æ—Ç—Ä–∞–±–æ—Ç–∞–ª —Å–≤–æ—ë –ø—Ä–æ–ø—É—â–µ–Ω–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ! –°—Ç–∞—Ä–π—Å—è –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å!')

async def start_database():
    await update()
    loop = asyncio.get_event_loop()
    await upload_working_of_to_scheldue()
    while True:
        await loop.run_in_executor(None, once_schedule.exec_jobs)
        schedule.run_pending()
        await asyncio.sleep(1)


async def upload_working_of_to_scheldue():
    loop = asyncio.get_event_loop()
    all_working_of = await loop.run_in_executor(None, db.get_all_working_of)
    now = datetime.datetime.now()
    once_schedule.delete_jobs()
    for working_of in all_working_of:
        try:
            start_time = datetime.datetime.strptime(working_of['start_time'], '%Y-%m-%d %H:%M:%S')
        except:
            start_time = datetime.datetime.strptime(working_of['start_time'], '%Y-%m-%d %H:%M')
        end_time = start_time + datetime.timedelta(hours=1)
        if now <= start_time:
            user = bot.get_user(working_of['student_id'])
            once_schedule.once(start_time - datetime.timedelta(minutes=10), lambda user, role_id: asyncio.run_coroutine_threadsafe(get_roles_and_notofication(user, role_id), bot.loop), args=(user, working_of['role_id'], ))
            once_schedule.once(start_time + datetime.timedelta(minutes=15), lambda user, voice_chat_id, db_id: asyncio.run_coroutine_threadsafe(check_members_work_of(user, voice_chat_id, db_id), bot.loop), args=(user, working_of['voice_id'], working_of['id'], )) # TODO
            once_schedule.once(end_time, lambda user, role_id, db_id: asyncio.run_coroutine_threadsafe(remove_role(user, role_id, db_id), bot.loop), args=(user, working_of['role_id'], working_of['id'], ))


SERVER_ID = int(os.getenv('SERVER_ID'))
ADMIN_ROLE_ID = int(os.getenv('ADMIN_ROLE_ID'))


bot = commands.Bot(command_prefix='/', intents=discord.Intents.all())
bot.remove_command('help')


@bot.event
async def on_ready(): # –ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –¥–± –∏ –∑–∞–¥–∞—ë—Ç—Å—è —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
    loop = asyncio.get_event_loop()
    await bot.change_presence(status=discord.Status.online, activity=discord.Game('Python üíª'))
    asyncio.run_coroutine_threadsafe(start_database(), bot.loop)

# –í—Ä–µ–º–µ–Ω–Ω–æ —É–±—Ä–∞–ª –∫–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∞ –±–æ—Ç–∞
# @bot.event
# async def on_member_join(member): # –í –¥–∞–ª—å–Ω–µ–π—à–µ–º, —Ñ—É–Ω–∫—Ü–∏—è echo –ø–µ—Ä–µ–µ–¥–µ—Ç —Å—é–¥–∞. –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ —á–µ–ª–æ–≤–µ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è
#     loop = asyncio.get_running_loop()
#     groups = await loop.run_in_executor(None, db.get_all_groups_ids)
#     guild = bot.get_guild(int(SERVER_ID))
#     groups_texts = [f'{num}. {guild.get_role(group_role_id)}' for num, group_role_id in enumerate(groups, 1)]
#     user = bot.get_user(member.id)
#     await user.send('### –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ Python –≤—Å—ë —Å—ä–µ—Å—Ç! –°–µ–π—á–∞—Å —Ç–µ–±–µ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ—é –≥—Ä—É–ø–ø—É, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã —É—á–∏—à—å—Å—è (–ª—É—á—à–µ —É—Ç–æ—á–Ω–∏ —Ä–æ–¥–∏—Ç–µ–ª–µ–π –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è). –í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã:\n{}\n–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É –ø—Ä—è–º–æ –∫–æ –º–Ω–µ –≤ —á–∞—Ç:\n/reg ***<–ò–º—è>*** ***<–§–∞–º–∏–ª–∏—è>*** ***<ID –≥—Ä—É–ø–ø—ã (—Å–º–æ—Ç—Ä–∏ —Å–≤–µ—Ä—Ö—É)>*** ***<—Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–≤–æ–π Devman –ø—Ä–æ—Ñ–∏–ª—å>***\n –í–æ—Ç –ø—Ä–∏–º–µ—Ä: /reg –§—É—Ä—Ñ—É—Ä –§—É—Ä—Ñ—É—Ä–Ω—ã–π 1 https://dvmn.org/user/furfur/'.format("\n".join(groups_texts)))


@bot.command(name='check') # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–ø—É—Å–∫–æ–≤.
async def check_working_of(ctx):
    loop = asyncio.get_event_loop()
    author = ctx.message.author
    guild = bot.get_guild(int(SERVER_ID))
    user = guild.get_member(author.id)
    try:
        user_skips = (await loop.run_in_executor(None, db.get_student, user.id))['skips']
    except TypeError:
        await ctx.reply('–Ø –Ω–µ –Ω–∞—à—ë–ª —Ç–µ–±—è –≤ —Å–≤–æ–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ç—ã –ø—Ä–æ–ø–∏—Å—ã–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /reg.')
        return
    if not user_skips:
        await ctx.reply('–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–æ–ø—É—Å–∫–æ–≤! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é:)')
        return
    groups = await loop.run_in_executor(None, db.get_free_groups_for_working_of, user.id)
    groups_texts_dates = []
    for group in groups:
        days = group['days'].replace('monday', '0').replace('tuesday', '1').replace('wednesday', '2').replace('thursday', '3').replace('friday', '4').replace('saturday', '5').replace('sunday', '6')
        for index in range(len(days.split(', '))):
            date = next_weekday(datetime.date.today(), int(days.split(', ')[index]))
            moscow_time = f'{int(group["start_time"].split(":")[0]) + 3}:{group["start_time"].split(":")[1]}'
            groups_texts_dates.append((f'{date.strftime("%d.%m")} –≤ {moscow_time}', date))
    groups_texts = [f'{num}. {i[0]}' for num, i in enumerate(sorted(groups_texts_dates, key=lambda i: i[1]), 1)]
    if groups_texts:
        await ctx.reply('–ü—Ä–∏–≤–µ—Ç! C–µ–π—á–∞—Å —É —Ç–µ–±—è –≤–æ—Ç —Å—Ç–æ–ª—å–∫–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤: {}. –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –∏—Ö –º–æ–∂–Ω–æ –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å:) –í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã:\n{}\n–û—Ç—Ä–∞–±–æ—Ç–∫–∞ –∏–¥—ë—Ç –æ–¥–∏–Ω —á–∞—Å!\n–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –æ—Ç—Ä–∞–±–æ—Ç–∫—É –Ω–∞–ø–∏—à–∏: /work_of <–ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã (—Å–º–æ—Ç—Ä–∏ —Å–≤–µ—Ä—Ö—É)>'.format(user_skips, '\n'.join(groups_texts))) #TODO –î–æ–±–∞–≤–∏—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!
    else:
        await ctx.reply('–ü—Ä–∏–≤–µ—Ç! C–µ–π—á–∞—Å —É —Ç–µ–±—è –≤–æ—Ç —Å—Ç–æ–ª—å–∫–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤: {}. –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –∏—Ö –º–æ–∂–Ω–æ –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å:) –ù–æ –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π –≥—Ä—É–ø–ø—ã. –°–º–æ–∂–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã: /check'.format(user_skips))

@bot.command(name='work_of') # –î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –æ—Ç—Ä–∞–±–æ—Ç–∫—É
async def add_work_of(ctx, group_number: int = None):
    loop = asyncio.get_event_loop()
    author = ctx.message.author
    guild = bot.get_guild(int(SERVER_ID))
    user = guild.get_member(author.id)
    try:
        student_skips = (await loop.run_in_executor(None, db.get_student, int(author.id)))['skips']
    except TypeError:
        await ctx.reply('–Ø –Ω–µ –Ω–∞—à—ë–ª —Ç–µ–±—è –≤ —Å–≤–æ–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ç—ã –ø—Ä–æ–ø–∏—Å—ã–≤–∞–ª –∫–æ–º–∞–Ω–¥—É /reg.')
        return
    groups = await loop.run_in_executor(None, db.get_free_groups_for_working_of, user.id)
    working_of_dates = []
    for group in groups:
        days = group['days'].replace('monday', '0').replace('tuesday', '1').replace('wednesday', '2').replace('thursday', '3').replace('friday', '4').replace('saturday', '5').replace('sunday', '6')
        for index in range(len(days.split(', '))):
            date = next_weekday(datetime.datetime.today(), int(days.split(', ')[index]))
            working_of_dates.append((group['start_time'], date.strftime('%Y-%m-%d'), group['role_id'], group['voice_chat_id']))
    all_working_of = sorted(working_of_dates, key=lambda i: i[1])
    if group_number is None:
        await ctx.reply('–¢—ã –Ω–µ —É–∫–∞–∑–∞–ª –≥—Ä—É–ø–ø—É –¥–ª—è –æ—Ç—Ä–∞–±–æ—Ç–∫–∏!')
        return
    if group_number - 1 > len(all_working_of) or group_number < 1:
        await ctx.reply('–¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
        return
    if student_skips == 0:
        await ctx.reply('–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–æ–ø—É—Å–∫–æ–≤! –¢–µ–±–µ –Ω–µ –Ω–∞–¥–æ –Ω–∏—á–µ–≥–æ –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å:) –ö—Ä—É—Ç–æ:)')
        return
    selected_working_of = all_working_of[group_number - 1]
    start_time = datetime.datetime.strptime(f'{selected_working_of[1]} {selected_working_of[0]}', '%Y-%m-%d %H:%M')
    end_time = start_time + datetime.timedelta(hours=1)
    id = await loop.run_in_executor(None, db.create_working_of, user.id, selected_working_of[2], start_time, end_time, selected_working_of[3])
    once_schedule.once(start_time - datetime.timedelta(minutes=10), lambda user, role_id: asyncio.run_coroutine_threadsafe(get_roles_and_notofication(user, role_id), bot.loop), args=(user, selected_working_of[2], ))
    once_schedule.once(start_time + datetime.timedelta(minutes=15), lambda user, voice_chat_id, db_id: asyncio.run_coroutine_threadsafe(check_members_work_of(user, voice_chat_id, db_id), bot.loop), args=(user, selected_working_of[3], id, )) # TODO
    once_schedule.once(end_time, lambda user, role_id, db_id: asyncio.run_coroutine_threadsafe(remove_role(user, role_id, db_id), bot.loop), args=(user, selected_working_of[2], id, ))
    role_name =  guild.get_role(selected_working_of[2]).name
    student_info = await loop.run_in_executor(None, db.get_student, user.id)
    new_student_skips = student_info['skips'] - 1
    await loop.run_in_executor(None, db.update_student_skips, new_student_skips, user.id)
    moscow_start_time = start_time + datetime.timedelta(hours=3)
    await ctx.reply(f'–í—Å—ë! –Ø –∑–∞–ø–∏—Å–∞–ª —Ç–µ–±—è! ***{moscow_start_time.strftime("%d.%m.%Y %H:%M")}*** –ø–æ–¥–∫–ª—é—á–∞–π—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É ***–ó–∞–Ω—è—Ç–∏–µ {role_name}*** (–¥–æ—Å—Ç—É–ø –∫ –Ω–µ–º—É —É —Ç–µ–±—è –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞). –¢–∞–∫–∂–µ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —è —Ç–µ–±–µ –Ω–∞–ø–æ–º–Ω—é! –ü—Ä–æ—à—É –Ω–µ –æ–ø–∞–∑–¥—ã–≤–∞—Ç—å!' )
 

@bot.command(name='echo') # –ó–∞–≥–ª—É—à–∫–∞! –í –¥–∞–ª—å–Ω–µ–π—à–µ–º, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–¥
async def help(ctx):
    loop = asyncio.get_running_loop()
    groups = await loop.run_in_executor(None, db.get_all_groups_ids)
    guild = bot.get_guild(int(SERVER_ID))
    groups_texts = [f'{num}. {guild.get_role(group_role_id)}' for num, group_role_id in enumerate(groups, 1)]
    author = ctx.message.author
    user = bot.get_user(author.id)
    await user.send('### –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ Python –≤—Å—ë —Å—ä–µ—Å—Ç! –°–µ–π—á–∞—Å —Ç–µ–±–µ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Å–≤–æ—é –≥—Ä—É–ø–ø—É, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã —É—á–∏—à—å—Å—è (–ª—É—á—à–µ —É—Ç–æ—á–Ω–∏ —Ä–æ–¥–∏—Ç–µ–ª–µ–π –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è). –í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã:\n{}\n–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É –ø—Ä—è–º–æ –∫–æ –º–Ω–µ –≤ —á–∞—Ç:\n/reg ***<–ò–º—è>*** ***<–§–∞–º–∏–ª–∏—è>*** ***<ID –≥—Ä—É–ø–ø—ã (—Å–º–æ—Ç—Ä–∏ —Å–≤–µ—Ä—Ö—É)>*** ***<—Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–≤–æ–π Devman –ø—Ä–æ—Ñ–∏–ª—å>***\n –í–æ—Ç –ø—Ä–∏–º–µ—Ä: /reg –§—É—Ä—Ñ—É—Ä –§—É—Ä—Ñ—É—Ä–Ω—ã–π 1 https://dvmn.org/user/furfur/'.format("\n".join(groups_texts)))


@bot.command() # –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
async def reg(ctx, name=None, last_name=None, role_id=None, *, devman_url=None):
    loop = asyncio.get_running_loop()
    if name is None or last_name is None or role_id is None or devman_url is None:
        await ctx.reply('–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ —Ç—ã –∫–∞–∫–æ–π-—Ç–æ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ —É–∫–∞–∑–∞–ª:( –ü—Ä–æ–≤–µ—Ä—å!')
        return
    author = ctx.message.author
    students_ids = await loop.run_in_executor(None, db.get_all_students_ids)
    try:
        int(role_id)
    except:
        await ctx.reply('–ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º! –ü—Ä–æ–≤–µ—Ä—å —ç—Ç–æ!')
        return
    if author.id in students_ids:
        await ctx.reply('### –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!\n–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –≥—Ä—É–ø–ø–ø—É –∏–ª–∏ –¥—É–º–∞–µ—à—å, —á—Ç–æ —è –æ—à–∏–±—Å—è, —Ç–æ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –ú–∏—Ö–∞–∏–ª—É!')
        return
    url_patrs = urllib.parse.urlparse(devman_url)
    if not (url_patrs.netloc == 'dvmn.org' and '/user/' in url_patrs.path):
        await ctx.reply('–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ —Å—Å—ã–ª–∫–∞ –≤–µ–¥—ë—Ç –Ω–µ –Ω–∞ —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å –≤ Devman! –ü—Ä–æ–≤–µ—Ä—å!')
        return
    all_groups = await loop.run_in_executor(None, db.get_all_groups_ids)
    guild = bot.get_guild(int(SERVER_ID))
    if int(role_id) > len(all_groups) or int(role_id) < 1:
        await ctx.reply('–¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö')
        return
    role = guild.get_role(all_groups[int(role_id) - 1])
    user = guild.get_member(author.id)
    await user.add_roles(role)
    await loop.run_in_executor(None, db.add_student, (author.id, f'{name} {last_name}', role.id, devman_url, 0, ''))
    await ctx.reply(f'–¢–µ–ø–µ—Ä—å —Ç—ã –Ω–∞–∑–Ω–∞—á–µ–Ω –≤ –≥—Ä—É–ø–ø—É {role.name}. –ü—Ä–æ–≤–µ—Ä—å, –≤ –Ω–∞—à–µ–º Discord —Å–µ—Ä–≤–µ—Ä–µ —É —Ç–µ–±—è –¥–æ–ª–∂–Ω—ã –ø–æ—è–≤–∏—Ç—Å—è –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∏ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª—ã. –í –≥–æ–ª–æ—Å–æ–≤–æ–º –±—É–¥—É—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –∑–∞–Ω—è—Ç–∏—è. –ü—Ä–æ—Å—Ç–æ –ø–æ–¥–∫–ª—é—á–∏—Å—å –∫ –Ω–µ–º—É –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞. –£–¥–∞—á–∏ —Ç–µ–±–µ –≤ –æ–±—É—á–µ–Ω–∏–∏ –∏ —É —Ç–µ–±—è –≤—Å—ë –ø–æ–ª—É—á–∏—Ç—Å—è:)')


@bot.command() # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–¥–º–∏–Ω–æ–≤. –£–¥–∞–ª—è–µ—Ç —É—á–µ–Ω–∏–∫–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —É–±–∏—Ä–∞–µ—Ç —É –Ω–µ–≥–æ —Ä–æ–ª–∏
async def unreg(ctx, user: discord.Member = None):
    loop = asyncio.get_running_loop()
    author = ctx.message.author
    author_roles = [role.id for role in author.roles]
    if ADMIN_ROLE_ID in author_roles:
        if user is None:
            await ctx.reply('–¢—ã –Ω–µ —É–∫–∞–∑–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å!')
            await asyncio.sleep(3)
            await ctx.channel.purge(limit=2)
            return
        await loop.run_in_executor(None, db.remove_student, user.id)
        for role in user.roles:
            if role.id != ADMIN_ROLE_ID:
                try:
                    await user.remove_roles(role)
                except:
                    continue
        await ctx.reply(f'{user} –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —É –Ω–µ–≥–æ –±—ã–ª–∏ —É–±—Ä–∞–Ω—ã –≤—Å–µ —Ä–æ–ª–∏!')
    else:
        await ctx.reply('–£ –í–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –ª–µ–≤–æ!')
    await asyncio.sleep(3)
    await ctx.channel.purge(limit=2)


@bot.command() # –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏
async def clear(ctx, amount = 3):
    author = ctx.message.author
    author_roles = [role.id for role in author.roles]
    if ADMIN_ROLE_ID in author_roles:
        await ctx.channel.purge(limit=amount + 1)
    else:
        await ctx.reply('–£ –í–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –ª–µ–≤–æ!')
        await asyncio.sleep(3)
        await ctx.channel.purge(limit=2)

@bot.command() # –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏
async def clear_skips(ctx):
    author = ctx.message.author
    if ctx.channel.guild:
        author_roles = [role.id for role in author.roles]
    else:
        guild = bot.get_guild(int(SERVER_ID))
        author_roles = [role.id for role in guild.get_member(author.id).roles]
    if ADMIN_ROLE_ID in author_roles:
        loop = asyncio.get_running_loop()
        await loop.run_in_executor(None, db.remove_all_skips)
        await ctx.reply('–í—Å–µ –ø—Ä–æ–ø—É—Å–∫–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!')
        await asyncio.sleep(3)
        try:
            await ctx.channel.purge(limit=2)
        except:
            pass
    else:
        await ctx.reply('–£ –í–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –ª–µ–≤–æ!')
        await asyncio.sleep(3)
        await ctx.channel.purge(limit=2)
# @bot.command()
# async def add(ctx):
#     loop = asyncio.get_running_loop()
#     author = ctx.message.author
#     student_info = await loop.run_in_executor(None, db.get_student, author.id)
#     new_student_skips = student_info['skips'] + 1
#     await loop.run_in_executor(None, db.update_student_skips, new_student_skips, author.id)


# @bot.command()
# async def minus(ctx):
#     loop = asyncio.get_running_loop()
#     author = ctx.message.author
#     student_info = await loop.run_in_executor(None, db.get_student, author.id)
#     new_student_skips = student_info['skips'] - 1
#     await loop.run_in_executor(None, db.update_student_skips, new_student_skips, author.id)

@bot.command()
async def help(ctx):
    author = ctx.message.author
    user = bot.get_user(author.id)
    text = '''
–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:
/reg - –ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (/reg –§—É—Ä—Ñ—É—Ä –§—É—Ä—Ñ—É—Ä–Ω—ã–π 1 https://dvmn.org/user/furfur/
/unreg <@user> - –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞! –ü—Ä–∏–º–µ—Ä: /unreg @Furfur
/clear <–∫–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π> - –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞. –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞! –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: 3 —Å–æ–æ–±—â–µ–Ω–∏—è. –ü—Ä–∏–º–µ—Ä: /clear 1
/check - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–ª-–≤–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤ —É —Å–µ–±—è
/work_of <–Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã> - –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ—Ç—Ä–∞–±–æ—Ç–∫—É. –ü—Ä–∏–º–µ—Ä: /work_of 1
–ï—Å–ª–∏ –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã, —Å–ø—Ä–∞—à–∏–≤–∞–π —É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.'''
    await user.send(text)
    try:
        await ctx.channel.purge(limit=1)
    except:
        pass


@bot.command()
async def download(ctx):
    author = ctx.message.author
    if ctx.channel.guild:
        author_roles = [role.id for role in author.roles]
    else:
        guild = bot.get_guild(int(SERVER_ID))
        author_roles = [role.id for role in guild.get_member(author.id).roles]
    if ADMIN_ROLE_ID in author_roles:
        loop = asyncio.get_running_loop()
        loop.run_in_executor(None, google_sheet.make_groups_worksheet, sheet)
        loop.run_in_executor(None, google_sheet.make_students_worksheet, sheet)
        loop.run_in_executor(None, google_sheet.make_working_off_worksheet, sheet)
        loop.run_in_executor(None, google_sheet.make_skips_worksheet, sheet)
        await ctx.reply('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤—ã–≥—Ä—É–∂–µ–Ω–∞ –≤ Excel!')
        await asyncio.sleep(3)
        try:
            await ctx.channel.purge(limit=2)
        except:
            pass
    else:
        await ctx.reply('–£ –í–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –ª–µ–≤–æ!')
        await asyncio.sleep(3)
        await ctx.channel.purge(limit=2)


@bot.command()
async def upload(ctx):
    author = ctx.message.author
    if ctx.channel.guild:
        author_roles = [role.id for role in author.roles]
    else:
        guild = bot.get_guild(int(SERVER_ID))
        author_roles = [role.id for role in guild.get_member(author.id).roles]
    if ADMIN_ROLE_ID in author_roles:
        loop = asyncio.get_running_loop()
        loop.run_in_executor(None, google_sheet.upload_workings, sheet)
        loop.run_in_executor(None, google_sheet.upload_group, sheet)
        loop.run_in_executor(None, google_sheet.upload_student, sheet)
        loop.run_in_executor(None, google_sheet.upload_skip, sheet)
        await upload_working_of_to_scheldue()
        await ctx.reply('–î–∞–Ω–Ω—ã–µ –∏–∑ Excel –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –±–∞–∑—É!')
        await asyncio.sleep(3)
        try:
            await ctx.channel.purge(limit=2)
        except:
            pass
    else:
        await ctx.reply('–£ –í–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –ª–µ–≤–æ!')
        await asyncio.sleep(3)
        await ctx.channel.purge(limit=2)

def main(): # –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    bot.run(os.getenv('DISCORD_TOKEN'))


if __name__ == '__main__':
    main()

# Created by slezkinis
