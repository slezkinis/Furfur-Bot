import discord
from discord.ext import commands
from dotenv import load_dotenv
import os
import asyncio
import schedule
from schedule import repeat, every
import datetime

from db import SQL


db = SQL()


def next_weekday(d, weekday):
    days_ahead = weekday - d.weekday()
    if days_ahead <= 0: # Target day already happened this week
        days_ahead += 7
    return d + datetime.timedelta(days_ahead)


async def job(channel: discord.TextChannel, guild: discord.Guild, members, name):
    # await channel.send(f'üö®–í—Å–µ–º –ø—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞! –ü—Ä–æ—Å—å–±–∞ –Ω–µ –æ—Ç–∫–ª—é—á–∞—Ç—å—Å—è –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –±–ª–∏–∂–∞–π—à–∏–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥!üö®')
    loop = asyncio.get_event_loop()
    guild = bot.get_guild(int(SERVER_ID))
    voice_channels_names = [i.name for i in guild.voice_channels]
    voice_channel = guild.voice_channels[voice_channels_names.index(name)]
    was = []
    was_working_of = []
    for member in members:
        user = guild.get_member(member['id'])
        if member['id'] not in [i.id for i in voice_channel.members]:
            was_working_of.append(user)
        else:
            was.append(user.name)
    # await channel.send(f'–°–µ–≥–æ–¥–Ω—è –Ω–∞ –∑–∞–Ω—è—Ç–∏—è—Ö –±—ã–ª–∏: {", ".join(was)}')
    for student in was_working_of:
        student_info = await loop.run_in_executor(None, db.get_student, student.id)
        new_student_skips = student_info['skips'] + 1
        await loop.run_in_executor(None, db.update_student_skips, new_student_skips, student.id)
        groups = await loop.run_in_executor(None, db.get_free_groups_for_working_of, student.id)
        print(groups)
        groups_texts = []
        num = 1
        for group in groups:
            days = group['days'].replace('monday', '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫').replace('tuesday', '–≤—Ç–æ—Ä–Ω–∏–∫').replace('wednesday', '—Å—Ä–µ–¥–∞').replace('thursday', '—á–µ—Ç–≤–µ—Ä–≥').replace('friday', '–ø—è—Ç–Ω–∏—Ü–∞').replace('saturday', '—Å—É–±–±–æ—Ç–∞').replace('sunday', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ')
            for index in range(len(days.split(', '))):
                groups_texts.append(f'{num}. –î–µ–Ω—å: {days.split(", ")[index]}\n  –í—Ä–µ–º—è: –≤ {group["start_time"]}')
                num += 1
        if groups_texts:
            await student.send('–ü—Ä–∏–≤–µ—Ç! –¢—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª –∑–∞–Ω—è—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å–µ–π—á–∞—Å –±—ã–ª–æ! –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, —ç—Ç–æ—Ç –ø—Ä–æ–ø—É—Å–∫ –º–æ–∂–Ω–æ –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å:) –í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã:\n{}\n–û—Ç—Ä–∞–±–æ—Ç–∫–∞ –∏–¥—ë—Ç –æ–¥–∏–Ω —á–∞—Å!\n–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –æ—Ç—Ä–∞–±–æ—Ç–∫—É –Ω–∞–ø–∏—à–∏: /work_of <–ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã (—Å–º–æ—Ç—Ä–∏ —Å–≤–µ—Ä—Ö—É)>'.format('\n'.join(groups_texts))) #TODO –î–æ–±–∞–≤–∏—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!
        else:
            await student.send('–ü—Ä–∏–≤–µ—Ç! –¢—ã –ø—Ä–æ–ø—É—Å—Ç–∏–ª –∑–∞–Ω—è—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å–µ–π—á–∞—Å –±—ã–ª–æ! –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, —ç—Ç–æ—Ç –ø—Ä–æ–ø—É—Å–∫ –º–æ–∂–Ω–æ –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å:) –ù–æ –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π –≥—Ä—É–ø–ø—ã. –°–º–æ–∂–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã: /check')

@repeat(every(10).seconds)
def start_update():
    asyncio.run_coroutine_threadsafe(update(), bot.loop)


async def update():
    loop = asyncio.get_event_loop()
    guild = bot.get_guild(int(SERVER_ID))
    groups = await loop.run_in_executor(None, db.get_all_groups)
    database = dict()
    for group in groups:
        group_name = guild.get_channel(group['voice_chat_id']).name
        hour, _ = group['start_time'].split(':')
        time = ':'.join((hour, '30'))
        members = await loop.run_in_executor(None, db.get_all_students_for_group, group['role_id'])
        database[group_name] = {'days': group['days'].split(', '), 'time': '14:33', 'channel_id': group['channel_id'], 'members': [{'name': i['name'], 'id': i['discord_id']} for i in members]}
    schedule.clear('check')
    for name, data in database.items():
        channel = bot.get_channel(data['channel_id'])
        # print('; '.join(data['members']))
        for date in data['days']:
            if date == 'monday':
                schedule.every().monday.at(data['time']).do(lambda channel, guild, members, name: asyncio.run_coroutine_threadsafe(job(channel, guild, members, name), bot.loop), channel, guild, data['members'], name).tag('check')
            elif date == 'tuesday':
                schedule.every().tuesday.at(data['time']).do(lambda channel, guild, members, name: asyncio.run_coroutine_threadsafe(job(channel, guild, members, name), bot.loop), channel, guild, data['members'], name).tag('check')
            elif date == 'wednesday':
                schedule.every().wednesday.at(data['time']).do(lambda channel, guild, members, name: asyncio.run_coroutine_threadsafe(job(channel, guild, members, name), bot.loop), channel, guild, data['members'], name).tag('check')
            elif date == 'thursday':
                schedule.every().thursday.at(data['time']).do(lambda channel, guild, members, name: asyncio.run_coroutine_threadsafe(job(channel, guild, members, name), bot.loop), channel, guild, data['members'], name).tag('check')
            elif date == 'friday':
                schedule.every().friday.at(data['time']).do(lambda channel, guild, members, name: asyncio.run_coroutine_threadsafe(job(channel, guild, members, name), bot.loop), channel, guild, data['members'], name).tag('check')
            elif date == 'saturday':
                schedule.every().saturday.at(data['time']).do(lambda channel, guild, members, name: asyncio.run_coroutine_threadsafe(job(channel, guild, members, name), bot.loop), channel, guild, data['members'], name).tag('check')
            elif date == 'sunday':
                schedule.every().sunday.at(data['time']).do(lambda channel, guild, members, name: asyncio.run_coroutine_threadsafe(job(channel, guild, members, name), bot.loop), channel, guild, data['members'], name).tag('check')


#TODO –ù—É–∂–Ω–æ –ø–æ–º–µ–Ω—è—Ç—å time
async def send_info():
    await update()
    while True:
        schedule.run_pending()
        await asyncio.sleep(1)

load_dotenv()

SERVER_ID = 1119553215856386058

bot = commands.Bot(command_prefix='/', intents=discord.Intents.all())
bot.remove_command('help')

@bot.event
async def on_ready():
    asyncio.run_coroutine_threadsafe(send_info(), bot.loop)


@bot.event
async def on_member_join(member): # –í –¥–∞–ª—å–Ω–µ–π—à–µ–º, —Ñ—É–Ω–∫—Ü–∏—è echo –ø–µ—Ä–µ–µ–¥–µ—Ç —Å—é–¥–∞. –°—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ —á–µ–ª–æ–≤–µ–∫ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è
    loop = asyncio.get_running_loop()
    groups = await loop.run_in_executor(None, db.get_all_groups)
    groups_texts = []
    num = 1
    for group in groups:
        days = group['days'].replace('monday', '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫').replace('tuesday', '–≤—Ç–æ—Ä–Ω–∏–∫').replace('wednesday', '—Å—Ä–µ–¥–∞').replace('thursday', '—á–µ—Ç–≤–µ—Ä–≥').replace('friday', '–ø—è—Ç–Ω–∏—Ü–∞').replace('saturday', '—Å—É–±–±–æ—Ç–∞').replace('sunday', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ')
        groups_texts.append(f'{num}. –î–Ω–∏: {days}\n  –í—Ä–µ–º—è: —Å {group["start_time"]} –¥–æ {group["end_time"]}')
        num += 1
    user = bot.get_user(member.id)
    await user.send('### –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä Python:) –í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã:\n{}\n–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É:\n/reg ***<–ò–º—è>*** ***<–§–∞–º–∏–ª–∏—è>*** ***<ID –≥—Ä—É–ø–ø—ã (—Å–º–æ—Ç—Ä–∏ —Å–≤–µ—Ä—Ö—É)>*** ***<—Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–≤–æ–π Devman –ø—Ä–æ—Ñ–∏–ª—å>***'.format("\n".join(groups_texts)))


@bot.command(name='check')
async def check_working_of(ctx):
    loop = asyncio.get_event_loop()
    author = ctx.message.author
    guild = bot.get_guild(int(SERVER_ID))
    user = guild.get_member(author.id)
    user_skips = (await loop.run_in_executor(None, db.get_student, user.id))['skips']
    if not user_skips:
        await ctx.reply('–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–æ–ø—É—Å–∫–æ–≤! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é:)')
        return
    groups = await loop.run_in_executor(None, db.get_free_groups_for_working_of, user.id)
    groups_texts = []
    num = 1
    for group in groups:
        days = group['days'].replace('monday', '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫').replace('tuesday', '–≤—Ç–æ—Ä–Ω–∏–∫').replace('wednesday', '—Å—Ä–µ–¥–∞').replace('thursday', '—á–µ—Ç–≤–µ—Ä–≥').replace('friday', '–ø—è—Ç–Ω–∏—Ü–∞').replace('saturday', '—Å—É–±–±–æ—Ç–∞').replace('sunday', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ')
        for index in range(len(days.split(', '))):
            groups_texts.append(f'{num}. –î–µ–Ω—å: {days.split(", ")[index]}\n  –í—Ä–µ–º—è: –≤ {group["start_time"]}')
            num += 1
    if groups_texts:
        await ctx.reply('–ü—Ä–∏–≤–µ—Ç! C–µ–π—á–∞—Å —É —Ç–µ–±—è –≤–æ—Ç —Å—Ç–æ–ª—å–∫–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤: {}. –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –∏—Ö –º–æ–∂–Ω–æ –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å:) –í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã:\n{}\n–û—Ç—Ä–∞–±–æ—Ç–∫–∞ –∏–¥—ë—Ç –æ–¥–∏–Ω —á–∞—Å!\n–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –æ—Ç—Ä–∞–±–æ—Ç–∫—É –Ω–∞–ø–∏—à–∏: /work_of <–ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã (—Å–º–æ—Ç—Ä–∏ —Å–≤–µ—Ä—Ö—É)>'.format(user_skips, '\n'.join(groups_texts))) #TODO –î–æ–±–∞–≤–∏—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!
    else:
        await ctx.reply('–ü—Ä–∏–≤–µ—Ç! C–µ–π—á–∞—Å —É —Ç–µ–±—è –≤–æ—Ç —Å—Ç–æ–ª—å–∫–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤: {}. –ù–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, –∏—Ö –º–æ–∂–Ω–æ –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å:) –ù–æ –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π –≥—Ä—É–ø–ø—ã. –°–º–æ–∂–µ—à—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã: /check'.format(user_skips))


@bot.command(name='work_of')
async def add_work_of(ctx, group_number: int = None):
    loop = asyncio.get_event_loop()
    author = ctx.message.author
    guild = bot.get_guild(int(SERVER_ID))
    user = guild.get_member(author.id)
    working_of = []
    groups = await loop.run_in_executor(None, db.get_free_groups_for_working_of, user.id)
    for group in groups:
        days = group['days'].replace('monday', '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫').replace('tuesday', '–≤—Ç–æ—Ä–Ω–∏–∫').replace('wednesday', '—Å—Ä–µ–¥–∞').replace('thursday', '—á–µ—Ç–≤–µ—Ä–≥').replace('friday', '–ø—è—Ç–Ω–∏—Ü–∞').replace('saturday', '—Å—É–±–±–æ—Ç–∞').replace('sunday', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ')
        for index in range(len(days.split(', '))):
            working_of.append((group['role_id'], group['days'].split(', ')[index]))
    if group_number is None:
        await ctx.reply('–¢—ã –Ω–µ —É–∫–∞–∑–∞–ª –≥—Ä—É–ø–ø—É –¥–ª—è –æ—Ç—Ä–∞–±–æ—Ç–∫–∏!')
        return
    if group_number - 1 > len(working_of) or group_number < 1:
        await ctx.reply('–¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
        return
    
    
    
@bot.command(name='echo') # –ó–∞–≥–ª—É—à–∫–∞! –í –¥–∞–ª—å–Ω–µ–π—à–µ–º, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–¥
async def help(ctx):
    loop = asyncio.get_running_loop()
    groups = await loop.run_in_executor(None, db.get_all_groups)
    groups_texts = []
    num = 1
    author = ctx.message.author
    for group in groups:
        days = group['days'].replace('monday', '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫').replace('tuesday', '–≤—Ç–æ—Ä–Ω–∏–∫').replace('wednesday', '—Å—Ä–µ–¥–∞').replace('thursday', '—á–µ—Ç–≤–µ—Ä–≥').replace('friday', '–ø—è—Ç–Ω–∏—Ü–∞').replace('saturday', '—Å—É–±–±–æ—Ç–∞').replace('sunday', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ')
        groups_texts.append(f'{num}. –î–Ω–∏: {days}\n  –í—Ä–µ–º—è: —Å {group["start_time"]} –¥–æ {group["end_time"]}')
        num += 1
    user = bot.get_user(author.id)
    await user.send('### –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä Python:) –í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≥—Ä—É–ø–ø—ã:\n{}\n–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É:\n/reg ***<–ò–º—è>*** ***<–§–∞–º–∏–ª–∏—è>*** ***<ID –≥—Ä—É–ø–ø—ã (—Å–º–æ—Ç—Ä–∏ —Å–≤–µ—Ä—Ö—É)>*** ***<—Å—Å—ã–ª–∫–∞ –Ω–∞ —Ç–≤–æ–π Devman –ø—Ä–æ—Ñ–∏–ª—å>***'.format("\n".join(groups_texts)))

@bot.command() # –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å
async def reg(ctx, name=None, last_name=None, role_id=None, *, devman_url=None):
    loop = asyncio.get_running_loop()
    if name is None or last_name is None or role_id is None or devman_url is None:
        await ctx.reply('–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ —Ç—ã –∫–∞–∫–æ–π-—Ç–æ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ —É–∫–∞–∑–∞–ª:( –ü—Ä–æ–≤–µ—Ä—å!')
        return
    author = ctx.message.author
    students_ids = await loop.run_in_executor(None, db.get_all_students_ids)
    if author.id in students_ids:
        await ctx.reply('### –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!\n–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –≥—Ä—É–ø–ø–ø—É –∏–ª–∏ –¥—É–º–∞–µ—à—å, —á—Ç–æ —è –æ—à–∏–±—Å—è, —Ç–æ –æ–±—Ä–∞—Ç–∏—Å—å –∫ –ú–∏—Ö–∞–∏–ª—É!')
        return
    all_groups = await loop.run_in_executor(None, db.get_all_groups_ids)
    guild = bot.get_guild(int(SERVER_ID))
    if int(role_id) > len(all_groups) or int(role_id) < 1:
        await ctx.reply('–¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö')
        return
    role = guild.get_role(all_groups[int(role_id) - 1])
    user = guild.get_member(author.id)
    await user.add_roles(role)
    await loop.run_in_executor(None, db.add_student, (author.id, f'{name} {last_name}', role.id, devman_url, 0))
    await ctx.reply(f'–¢–µ–ø–µ—Ä—å —Ç—ã –Ω–∞–∑–Ω–∞—á–µ–Ω –≤ –≥—Ä—É–ø–ø—É {role.name}')


def main():
    bot.run(os.getenv('DISCORD_TOKEN'))


if __name__ == '__main__':
    main()